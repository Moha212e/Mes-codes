//------------------------------------------------------------------------------
// <auto-generated>
//     This xml documentation was generated by CXCommenter: 1.0.1.0.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright file="Register.xaml.cs" company="PlaceholderCompany">
//     Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>
using System;
using System.Windows;
using MyShapeClass;

/// <summary>
///       Namespace Name - voyagoo.
/// </summary>
namespace voyagoo
{
    public partial class Register : Window
    {

        /// <summary>
        ///  Function Name :  Register.
        /// </summary>
        /// <returns>void.</returns>
        public Register()
        {
            InitializeComponent();
        }


        /// <summary>
        ///  Function Name :  register_User.
        /// </summary>
        /// <param name="sender">This sender's Datatype is : object.</param>
        /// <param name="e">This e's Datatype is : System.Windows.RoutedEventArgs.</param>
        /// <returns>void.</returns>
        private void register_User(object sender, RoutedEventArgs e)
        {
            string email = Email.Text;
            string password = Password.Password;
            string confirmPassword = PasswordCo.Password;
            DateTime? dateOfBirth = DateNaissance.SelectedDate;

            if (User.isMailValid(email) != 0)
            {
                ErrorMessage.Text = "Adresse mail invalide.";
                return;
            }
            // verifier si le mot de passe est rempli
            if (password.Length == 8)
            {
                ErrorMessage.Text = "Veuillez entrer un mot de passe valide.";
                return;
            }


            if (User.isEqualsPassword(password, confirmPassword) != 0)
            {
                ErrorMessage.Text = "Les mots de passe ne correspondent pas.";
                return;
            }
            if (dateOfBirth == null)
            {
                ErrorMessage.Text = "Veuillez sélectionner une date de naissance.";
                return;
            }
            if (dateOfBirth.Value.AddYears(18) > DateTime.Now)
            {
                ErrorMessage.Text = "Vous devez avoir au moins 18 ans pour vous inscrire.";
                return;
            }
            if (User.isUserExist(email, password) == 0)
            {
                ErrorMessage.Text = "Un utilisateur avec cet email existe déjà.";
                return;
            }
            switch (User.SaveUser(email, password, dateOfBirth.Value))
            {
                case 0:
                    // Inscription réussie
                    Index index = new Index();
                    index.Show();
                    this.Close();
                    break;

                case User.ERROR_PASSWORD_MISMATCH:
                    // Erreur de correspondance des mots de passe
                    ErrorMessage.Text = "Les mots de passe ne correspondent pas.";
                    break;

                case User.ERROR_INVALID_EMAIL:
                    // Erreur de format d'email
                    ErrorMessage.Text = "L'email est invalide.";
                    break;

                case User.ERROR_USER_NOT_FOUND:
                    // L'utilisateur n'a pas été trouvé
                    ErrorMessage.Text = "Utilisateur non trouvé.";
                    break;

                case User.ERROR_INCORRECT_PASSWORD:
                    // Le mot de passe est incorrect
                    ErrorMessage.Text = "Mot de passe incorrect.";
                    break;

                case User.ERROR_FILE_NOT_FOUND:
                    // Erreur liée au fichier (lecture/écriture)
                    ErrorMessage.Text = "Impossible de trouver ou d'accéder au fichier.";
                    break;

                default:
                    // Erreur inconnue
                    ErrorMessage.Text = "Une erreur inconnue s'est produite.";
                    break;
            }
        }


        /// <summary>
        ///  Function Name :  have_Account.
        /// </summary>
        /// <param name="sender">This sender's Datatype is : object.</param>
        /// <param name="e">This e's Datatype is : System.Windows.RoutedEventArgs.</param>
        /// <returns>void.</returns>
        private void have_Account(object sender, RoutedEventArgs e)
        {
            new MainWindow().Show();
            this.Close();
        }
    }
}
